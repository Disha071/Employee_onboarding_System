
import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Users, FileText, BookOpen, TrendingUp, Eye, CheckCircle, Download, Plus, Home } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

interface Employee {
  id: string;
  name: string;
  email: string;
  department: string;
  position: string;
  start_date: string;
  manager?: string;
  work_location?: string;
  phone?: string;
  created_at: string;
}

interface DocumentSubmission {
  id: string;
  employee_email: string;
  document_type: string;
  file_name: string;
  status: string;
  submitted_at: string;
}

const AdminDashboard = () => {
  const { user } = useAuth();
  const { toast } = useToast();
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [documents, setDocuments] = useState<DocumentSubmission[]>([]);
  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);
  const [showEmployeeDetails, setShowEmployeeDetails] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      // Load employees
      const { data: employeeData, error: employeeError } = await supabase
        .from('employee_accounts')
        .select('*')
        .order('created_at', { ascending: false });

      if (employeeError) throw employeeError;

      // Load document submissions
      const { data: documentData, error: documentError } = await supabase
        .from('document_submissions')
        .select('*')
        .eq('status', 'pending')
        .order('submitted_at', { ascending: false });

      if (documentError) throw documentError;

      setEmployees(employeeData || []);
      setDocuments(documentData || []);
    } catch (error) {
      console.error('Error loading data:', error);
      toast({
        title: "Error",
        description: "Failed to load dashboard data",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleViewEmployee = (employee: Employee) => {
    setSelectedEmployee(employee);
    setShowEmployeeDetails(true);
  };

  const handleVerifyDocument = async (documentId: string) => {
    try {
      const { error } = await supabase
        .from('document_submissions')
        .update({
          status: 'verified',
          verified_at: new Date().toISOString(),
          verified_by: user?.id
        })
        .eq('id', documentId);

      if (error) throw error;

      toast({
        title: "Success",
        description: "Document verified successfully!",
      });

      // Refresh data
      loadData();
    } catch (error) {
      console.error('Error verifying document:', error);
      toast({
        title: "Error",
        description: "Failed to verify document",
        variant: "destructive",
      });
    }
  };

  const handleDownloadReport = () => {
    const completedCount = employees.filter(emp => {
      // Assume completed if employee has been there for more than 30 days
      const startDate = new Date(emp.start_date);
      const daysSinceStart = Math.floor((Date.now() - startDate.getTime()) / (1000 * 60 * 60 * 24));
      return daysSinceStart > 30;
    }).length;

    const completionRate = employees.length > 0 ? Math.round((completedCount / employees.length) * 100) : 0;

    const reportContent = `
ONBOARDING COMPLETION REPORT
============================

Generated on: ${new Date().toLocaleDateString()}
Generated by: ${user?.name || 'Admin'}

Summary:
- Total Employees: ${employees.length}
- Completed Onboarding: ${completedCount}
- Completion Rate: ${completionRate}%
- Pending Documents: ${documents.length}

Employee Details:
${employees.map(emp => `
- Name: ${emp.name}
  Email: ${emp.email}
  Department: ${emp.department}
  Position: ${emp.position}
  Start Date: ${emp.start_date}
  Status: ${Math.floor((Date.now() - new Date(emp.start_date).getTime()) / (1000 * 60 * 60 * 24)) > 30 ? 'Completed' : 'In Progress'}
`).join('')}

Pending Document Verifications:
${documents.map(doc => `
- Employee: ${doc.employee_email}
  Document: ${doc.document_type}
  File: ${doc.file_name}
  Submitted: ${new Date(doc.submitted_at).toLocaleDateString()}
`).join('')}
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `onboarding-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Success",
      description: "Onboarding report downloaded successfully!",
    });
  };

  const stats = [
    {
      title: 'Total Employees',
      value: employees.length.toString(),
      icon: Users,
      color: 'text-blue-600',
      bgColor: 'bg-blue-50 dark:bg-blue-900/20',
    },
    {
      title: 'Pending Documents',
      value: documents.length.toString(),
      icon: FileText,
      color: 'text-orange-600',
      bgColor: 'bg-orange-50 dark:bg-orange-900/20',
    },
    {
      title: 'Active Employees',
      value: employees.filter(emp => {
        const daysSinceStart = Math.floor((Date.now() - new Date(emp.start_date).getTime()) / (1000 * 60 * 60 * 24));
        return daysSinceStart <= 90;
      }).length.toString(),
      icon: TrendingUp,
      color: 'text-green-600',
      bgColor: 'bg-green-50 dark:bg-green-900/20',
    },
    {
      title: 'Completion Rate',
      value: employees.length > 0 ? `${Math.round((employees.filter(emp => {
        const daysSinceStart = Math.floor((Date.now() - new Date(emp.start_date).getTime()) / (1000 * 60 * 60 * 24));
        return daysSinceStart > 30;
      }).length / employees.length) * 100)}%` : '0%',
      icon: BookOpen,
      color: 'text-purple-600',
      bgColor: 'bg-purple-50 dark:bg-purple-900/20',
    },
  ];

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto"></div>
          <p className="text-gray-600 dark:text-gray-300 mt-4">Loading dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 transition-colors duration-300">
      {/* Header */}
      <div className="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Admin Dashboard üë©‚Äçüíª</h1>
              <p className="text-sm text-gray-600 dark:text-gray-300">Welcome back, {user?.name || 'Admin'}! ‚ú®</p>
            </div>
            <div className="flex space-x-3">
              <Link to="/">
                <Button variant="outline" className="dark:border-gray-600 dark:text-gray-300">
                  <Home className="h-4 w-4 mr-2" />
                  Home
                </Button>
              </Link>
              <Link to="/add-employee">
                <Button className="bg-blue-600 hover:bg-blue-700">
                  <Plus className="h-4 w-4 mr-2" />
                  Add Employee
                </Button>
              </Link>
              <Button onClick={handleDownloadReport} className="bg-green-600 hover:bg-green-700">
                <Download className="h-4 w-4 mr-2" />
                Download Report
              </Button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {stats.map((stat, index) => (
            <Card key={index} className="hover:shadow-lg transition-all duration-300 transform hover:scale-105 dark:bg-gray-800 dark:border-gray-700">
              <CardContent className="p-6">
                <div className="flex items-center">
                  <div className={`p-3 rounded-lg ${stat.bgColor} mr-4`}>
                    <stat.icon className={`h-6 w-6 ${stat.color}`} />
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-600 dark:text-gray-300">{stat.title}</p>
                    <p className="text-2xl font-bold text-gray-900 dark:text-white">{stat.value}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* New Hires */}
          <Card className="dark:bg-gray-800 dark:border-gray-700">
            <CardHeader>
              <CardTitle className="flex items-center text-gray-900 dark:text-white">
                <Users className="h-5 w-5 mr-2 text-blue-600" />
                New Hires üë•
              </CardTitle>
              <CardDescription className="dark:text-gray-300">
                Recently added employees
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {employees.slice(0, 5).map((employee) => (
                  <div key={employee.id} className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg hover:shadow-md transition-shadow">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-semibold">
                        {employee.name.charAt(0)}
                      </div>
                      <div>
                        <p className="font-medium text-gray-900 dark:text-white">{employee.name}</p>
                        <p className="text-sm text-gray-600 dark:text-gray-300">{employee.department} ‚Ä¢ {employee.position}</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Badge variant="secondary" className="dark:bg-gray-600 dark:text-gray-200">
                        {new Date(employee.start_date).toLocaleDateString()}
                      </Badge>
                      <Button size="sm" onClick={() => handleViewEmployee(employee)}>
                        <Eye className="h-4 w-4 mr-1" />
                        View Details
                      </Button>
                    </div>
                  </div>
                ))}
                {employees.length === 0 && (
                  <p className="text-center text-gray-500 dark:text-gray-400 py-8">No employees added yet üìù</p>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Pending Documents */}
          <Card className="dark:bg-gray-800 dark:border-gray-700">
            <CardHeader>
              <CardTitle className="flex items-center text-gray-900 dark:text-white">
                <FileText className="h-5 w-5 mr-2 text-orange-600" />
                Pending Documents üìÑ
              </CardTitle>
              <CardDescription className="dark:text-gray-300">
                Documents awaiting verification
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {documents.slice(0, 5).map((doc) => (
                  <div key={doc.id} className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg hover:shadow-md transition-shadow">
                    <div>
                      <p className="font-medium text-gray-900 dark:text-white">{doc.document_type}</p>
                      <p className="text-sm text-gray-600 dark:text-gray-300">{doc.employee_email}</p>
                      <p className="text-xs text-gray-500 dark:text-gray-400">{doc.file_name}</p>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Badge variant="outline" className="text-orange-600 border-orange-600 dark:text-orange-400 dark:border-orange-400">
                        Pending
                      </Badge>
                      <Button size="sm" onClick={() => handleVerifyDocument(doc.id)} className="bg-green-600 hover:bg-green-700">
                        <CheckCircle className="h-4 w-4 mr-1" />
                        Verify
                      </Button>
                    </div>
                  </div>
                ))}
                {documents.length === 0 && (
                  <p className="text-center text-gray-500 dark:text-gray-400 py-8">No pending documents ‚úÖ</p>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Employee Details Dialog */}
      <Dialog open={showEmployeeDetails} onOpenChange={setShowEmployeeDetails}>
        <DialogContent className="max-w-2xl dark:bg-gray-800 dark:border-gray-700">
          <DialogHeader>
            <DialogTitle className="dark:text-white">Employee Details üë§</DialogTitle>
            <DialogDescription className="dark:text-gray-300">
              Complete information for {selectedEmployee?.name}
            </DialogDescription>
          </DialogHeader>
          {selectedEmployee && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 py-4">
              <div>
                <label className="text-sm font-medium text-gray-700 dark:text-gray-300">Full Name</label>
                <p className="text-lg text-gray-900 dark:text-white">{selectedEmployee.name}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
                <p className="text-lg text-gray-900 dark:text-white">{selectedEmployee.email}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700 dark:text-gray-300">Department</label>
                <p className="text-lg text-gray-900 dark:text-white">{selectedEmployee.department}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700 dark:text-gray-300">Position</label>
                <p className="text-lg text-gray-900 dark:text-white">{selectedEmployee.position}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700 dark:text-gray-300">Start Date</label>
                <p className="text-lg text-gray-900 dark:text-white">{new Date(selectedEmployee.start_date).toLocaleDateString()}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700 dark:text-gray-300">Manager</label>
                <p className="text-lg text-gray-900 dark:text-white">{selectedEmployee.manager || 'Not assigned'}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700 dark:text-gray-300">Work Location</label>
                <p className="text-lg text-gray-900 dark:text-white">{selectedEmployee.work_location || 'Not specified'}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700 dark:text-gray-300">Phone</label>
                <p className="text-lg text-gray-900 dark:text-white">{selectedEmployee.phone || 'Not provided'}</p>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default AdminDashboard;
